-*- org -*-

#+TODO: TODO FIXME | DONE

* DONE The camera viewable area and moving objects in the game world
  Try this:
  (defparameter *suzanne* (make-sprite :suzanne "examples/suzanne-white"))
  (wob :add-to-world *suzanne* (vec 64 64 30))
  (wob :rm-from-world *suzanne*)
  (wob :mv *suzanne* (vec 64 64 30))      ;Top of *suzanne* is not rendered
  (setq *camera-location* (vec 0 0 10))   ;Moving camera fixes this

* TODO Rendering optimization
* TODO Volumetric collision detection
* TODO Multibody physics objects with constraints
* TODO Use locations as fixnum arrays
* TODO Too short variables names for wobs, texture tiles and texture attribs.
  In fragment.glsl and render.lisp.
* TODO When signaling an error use appropriate conditions, not simple-error
* TODO Pass sun and ambient light to shaders via uniforms
* TODO Experiment with CA voxel format and its transfer function
  CA format consists of two 1-byte components: Color and Alpha.  Color
  value is used to lookup RGB value of a voxel via the transfer
  function.  This format will reduce voxmaps sizes.
* TODO Scripting language
* FIXME The camera near plan at big zoom
* TODO io_voxels: multithreaded rasterization
  The first version didn't work because Is_Inside is not reentrant.
  Copy mesh for each thread if it possible.

* TODO Thread-local hooks
  Each thread should create its local hooks with gensyms as names and
  global variables such as *render-init-hook* will be removed.
* TODO io_voxels: voxelize polygonal models with textures
* TODO Because tile size is a constant we can make proxy geometry at
  compile time.  Generate vertexes for the render tile at location (0
  0 0), then move them to the required tile location in the vertex
  shader.
